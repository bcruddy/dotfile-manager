#!/usr/bin/env bash

RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

reload_shell () {
    echo "Reloading shell...";
	source ~/.bash_profile;
	echo "Shell has been reloaded";
}

npm_install () {
    echo "running: rm -rf node_modules && npm cache clean --force && npm install";
    rm -rf node_modules && npm cache clean --force && npm install;
}

yarn_install () {
    echo "running: rm -rf node_modules && yarn cache clean && yarn";
    rm -rf node_modules && yarn cache clean && yarn;
}

wifi_password () {
     ~/Code/dotfile-manager/bin/wifi-password;
}

nuke_dsstore () {
    find . -name '*.DS_Store' -type f -ls -delete;
}

# print directory contents permissions as an octal
perms () {
    stat -f '%A %N' *
}

parse_git_branch () {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/';
}

curl_postf () {
	curl -i -X POST -H "Conent-Type: multipart/form-data" -F "data=@$1" $2; #[abs file path, url]
}

aggify () {
    if ! jq -e '
            ( arrays|. ) ,
            ( objects|select(has("pipeline"))|.pipeline ),
            ( objects|select(has("requests"))|.requests|first|.pipeline),
            ( objects|select(has("request"))|.request|.pipeline)
        '; then
        >&2 echo "Bad aggregation pipeline"; return 1
    fi | aggify_pipeline "$@"
}

aggify_pipeline () {
    if [ "$1" == "v1" ]; then
        jq '{name: "name", response: {mimeType: "application/json"}, request: {name: "name", requestId: "id", pipeline: .}]}'
    else
        jq '{name: "name", response: {location: "request", mimeType: "application/json"}, requests: [{name: "name", requestId: "id", pipeline: .}]}'
    fi
}

# Create a new directory and enter it
function md () {
  mkdir -p "$@" && cd "$@"
}

# clean the current directory
function clean () {
    read -p "remove everything here? (y/N)" yn
    if [ $yn = "y" ]; then
        rm -rf ./* ./.*
    fi
}

# check file size
function fs () {
    du -sh ${1} | awk '{print $1}'
}

# check processes using a port
function port () {
    lsof -iTCP:$1 -sTCP:LISTEN
}
